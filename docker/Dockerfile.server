# Use node as the base image for building both server and backend
FROM --platform=$BUILDPLATFORM node:18.17 AS builder

# Specify --no-install-recommends to skip unused dependencies, make the base much smaller!
# dumb-init = avoid zombie processes (#480)
RUN echo "deb http://deb.debian.org/debian testing main" >> /etc/apt/sources.list && \
    apt update && \
    apt --yes --no-install-recommends -t stable install  \
    dumb-init && \
    rm -rf /var/lib/apt/lists/* && \
    apt --yes autoremove

# Build the server
WORKDIR /app/server
COPY server/package.json ./
COPY server/package-lock.json ./
RUN npm ci --omit=dev
COPY core /app/core
RUN npm install /app/core
COPY server/ ./

# Build the frontend
WORKDIR /app/frontend
COPY frontend/package.json ./
COPY frontend/package-lock.json ./
RUN npm install
COPY frontend/ ./
RUN npm run build

# Use Apache to serve the frontend and proxy to the server
FROM --platform=$BUILDPLATFORM httpd:2.4
ARG S6_OVERLAY_VERSION=3.1.6.2
ARG TARGETOS TARGETARCH

# Install Node.js, curl, and git in the Apache stage
RUN apt-get update && \
    apt-get install -y curl git xz-utils && \
    curl -sL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install s6-overlay
# ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-noarch.tar.xz /tmp
# RUN tar -C / -Jxpf /tmp/s6-overlay-noarch.tar.xz
# TODO: !!!THIS IS A MUST!!! In woodpecker CI target specific architecture so we can support ARM !!!THIS IS A MUST!!!
# ADD https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VERSION}/s6-overlay-x86_64.tar.xz /tmp
# RUN tar -C / -Jxpf /tmp/s6-overlay-x86_64.tar.xz
COPY --from=arpaulnet/s6-overlay-stage:2.0 / /

# Copy frontend build output to Apache's htdocs
COPY --from=builder /app/frontend/dist/ /usr/local/apache2/htdocs/

# Copy the core, server, and other configuration files
COPY --from=builder /app/core/ /usr/local/core/
COPY --from=builder /app/server/ /usr/local/server/
COPY ./docker/.htaccess /usr/local/apache2/htdocs/.htaccess
COPY ./docker/my-httpd.conf /usr/local/apache2/conf/httpd.conf

# Setup s6 services
RUN mkdir -p /etc/services.d/apache /etc/services.d/nodejs
COPY ./docker/apache-run /etc/services.d/apache/run
COPY ./docker/nodejs-run /etc/services.d/nodejs/run
RUN chmod +x /etc/services.d/apache/run /etc/services.d/nodejs/run

# Expose port 80
EXPOSE 80

# Use s6-overlay as the entrypoint
ENTRYPOINT ["/init"]

# s6-overlay's init system will start services defined in /etc/services.d
CMD []